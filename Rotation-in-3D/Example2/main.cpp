#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include "SOIL.h"
#include <vector>

#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/ext.hpp>

#include "Shader.h"

GLuint VAO[9],VBO[9];

bool keys[1024];
GLfloat delta_time=0.0f;                // time between current frame and last frame
GLfloat last_frame=0.0f;                // time of last frame
GLfloat last_X=0.0f,last_Y=0.0f;
GLfloat fov=45.0f;
GLfloat yaw=-90.0f;                     // yaw is initialized to -90.0 degrees since a yaw of 0.0 results in a direction vector pointing
                                        // to the right (due to how Euler angles work) so we initially rotate a bit to the left.
GLfloat pitch=0.0f;
bool first_mouse=true;

glm::vec3 camera_position=glm::vec3(0.0f,0.0f,7.0f);
glm::vec3 camera_front=glm::vec3(0.0f,0.0f,-1.0f);
glm::vec3 camera_up=glm::vec3(0.0f,1.0f,0.0f);

GLfloat mix_value=0.2f;

GLfloat ROT = 0;

#define PI 3.14159


GLfloat * PLArm;
GLfloat LArmR = 0;
GLfloat LArmR2 = 0;
GLfloat* PRArm;
GLfloat RArmR = 0;
GLfloat RArmR2 = 0;
GLfloat* PLLeg;
GLfloat LLegR = 0;
GLfloat LLegR2 = 0;
GLfloat* PRLeg;
GLfloat RLegR = 0;
GLfloat RLegR2 = 0;

void key_callback(GLFWwindow* window,int key,int scancode,int action,int mode)
{
    if(action==GLFW_PRESS || action==GLFW_REPEAT) keys[key]=true;
    else if(action==GLFW_RELEASE) keys[key]=false;

    printf("\nKEY PRESSED:%d",key);

    if(key==GLFW_KEY_ESCAPE && action==GLFW_PRESS)
        glfwSetWindowShouldClose(window,GL_TRUE);

    if(key==GLFW_KEY_UP && action==GLFW_PRESS)
    {
        mix_value+=0.1f;
        if(mix_value>1.0f) mix_value=1.0f;
    }

    if(key==GLFW_KEY_DOWN && action==GLFW_PRESS)
    {
        mix_value-=0.1f;
        if(mix_value<0.0f) mix_value=0.0f;
    }

    //Rotate ALL models clockwise about y axis
    if(key==GLFW_KEY_LEFT && action==GLFW_PRESS || key==GLFW_KEY_LEFT && action==GLFW_REPEAT){
	ROT-=PI/2;
    }

    //Rotate ALL models counterclockwise about y axis
    if(key==GLFW_KEY_RIGHT && (action==GLFW_PRESS) || key==GLFW_KEY_RIGHT && (action==GLFW_REPEAT) ){
	ROT+=PI/2;
    }

    if((keys[GLFW_KEY_A]/* && (action==GLFW_PRESS) || key==GLFW_KEY_A && (action==GLFW_REPEAT)*/)){
	printf("LEFT ARM");
	if(keys[GLFW_KEY_J]){
		printf("\n Want to move left arm Counter Clockwise");
		 int Range[] = {
		0,47		
		 };
		 LArmR+=PI/2;
		 //if(LArmR>=2*PI)
		//RotateArray(PLArm, Range, LArmR,0);				
	}	
	else if(keys[GLFW_KEY_K]){
		printf("\n Want to move left arm Clockwise");
	  	 //RotateArray(GLfloat* G, int* Range, GLfloat Radians,int Axis)
		LArmR-=PI/2;
	}	
	else if(keys[GLFW_KEY_U]){
		LArmR2+=PI/2;
	}
    	else if(keys[GLFW_KEY_I]){
		LArmR2-=PI/2;
	}
    }

    if((keys[GLFW_KEY_S]/* && (action==GLFW_PRESS) || key==GLFW_KEY_A && (action==GLFW_REPEAT)*/)){
        printf("RIGHT ARM");
        if(keys[GLFW_KEY_J]){
                printf("\n Want to move right arm Counter Clockwise");
		RArmR+=PI/2;
        }       
        else if(keys[GLFW_KEY_K]){
                printf("\n Want to move right arm Clockwise");
		RArmR-=PI/2;
        }       
	else if(keys[GLFW_KEY_U]){
                RArmR2+=PI/2;
        }
        else if(keys[GLFW_KEY_I]){
                RArmR2-=PI/2;
        }
	
    } 
	
    if((keys[GLFW_KEY_D]/* && (action==GLFW_PRESS) || key==GLFW_KEY_A && (action==GLFW_REPEAT)*/)){
        printf("LEFT LEG");
        if(keys[GLFW_KEY_J]){
                printf("\n Want to move left leg Counter Clockwise");
		LLegR+=PI/2;
        }       
        else if(keys[GLFW_KEY_K]){
                printf("\n Want to move left leg  Clockwise");
		LLegR-=PI/2;
        }       
	else if(keys[GLFW_KEY_U]){
                LLegR2+=PI/2;
        }
        else if(keys[GLFW_KEY_I]){
                LLegR2-=PI/2;
        }

    } 	
 

    if((keys[GLFW_KEY_F]/* && (action==GLFW_PRESS) || key==GLFW_KEY_A && (action==GLFW_REPEAT)*/)){
        printf("RIGHT LEG");
        if(keys[GLFW_KEY_J]){
                printf("\n Want to move right leg Counter Clockwise");
		RLegR+=PI/2;
        }       
        else if(keys[GLFW_KEY_K]){
                printf("\n Want to move right leg Clockwise");
		RLegR-=PI/2;
        }       
	else if(keys[GLFW_KEY_U]){
                RLegR2+=PI/2;
        }
        else if(keys[GLFW_KEY_I]){
                RLegR2-=PI/2;
        }
    } 

}



void do_movement()
{
    // camera controls
    GLfloat camera_speed=5.0f*delta_time;
    if(keys[GLFW_KEY_W]) camera_position+=camera_speed*camera_front;
    if(keys[GLFW_KEY_S]) camera_position-=camera_speed*camera_front;
    if(keys[GLFW_KEY_A]) camera_position-=glm::normalize(glm::cross(camera_front,camera_up))*camera_speed;
    if(keys[GLFW_KEY_D]) camera_position+=glm::normalize(glm::cross(camera_front,camera_up))*camera_speed;
}

void scroll_callback(GLFWwindow *window,double xoffset,double yoffset)
{
    if(fov>=1.0f && fov<=45.0f)  fov-=yoffset;
    if(fov<=1.0f) fov=1.0f;
    if(fov>=45.0f) fov=45.0f;
}

/*
void key_callback(GLFWwindow *window,int key,int scancode,int action,int mode)
{
    if(key==GLFW_KEY_ESCAPE && action==GLFW_PRESS)
        glfwSetWindowShouldClose(window,GL_TRUE);

    if(key==GLFW_KEY_UP && action==GLFW_PRESS)
    {
        mix_value+=0.1f;
        if(mix_value>1.0f) mix_value=1.0f;
    }

    if(key==GLFW_KEY_DOWN && action==GLFW_PRESS)
    {
        mix_value-=0.1f;
        if(mix_value<0.0f) mix_value=0.0f;
    }

    if(action==GLFW_PRESS) keys[key]=true;
    else if(action==GLFW_RELEASE) keys[key]=false;
}
*/
void mouse_callback(GLFWwindow *window,double xpos,double ypos)
{
    if(first_mouse)
    {
        last_X=xpos;
        last_Y=ypos;
        first_mouse=false;
    }

    GLfloat x_offset=xpos-last_X;
    GLfloat y_offset=last_Y-ypos;
    last_X=xpos;last_Y=ypos;

    GLfloat sensitivity=0.05f;
    x_offset*=sensitivity;
    y_offset*=sensitivity;
    yaw+=x_offset;
    pitch+=y_offset;

    if(pitch>89.0f) pitch=89.0f;
    else if(pitch<-89.0f) pitch=-89.0f;

    glm::vec3 front;
    front.x=cos(glm::radians(pitch))*cos(glm::radians(yaw));
    front.y=sin(glm::radians(pitch));
    front.z=cos(glm::radians(pitch))*sin(glm::radians(yaw));
    camera_front=glm::normalize(front);
}

GLuint Validate(Shader VFShader,glm::mat4 view, glm::mat4 projection){

GLuint view_location1=glGetUniformLocation(VFShader.program,"view");
        glUniformMatrix4fv(view_location1,1,GL_FALSE,glm::value_ptr(view));
        GLuint projection_location1=glGetUniformLocation(VFShader.program,"projection");

        glUniformMatrix4fv(projection_location1,1,GL_FALSE,glm::value_ptr(projection));

        GLuint model_location1=glGetUniformLocation(VFShader.program,"model");

return model_location1;

}

void SetUp3Array(GLfloat* P,int IDX,int DIM){


    // bind vertex array object
    glBindVertexArray(/* TO CHANGE  */VAO[IDX]);

    // copy the vertices in a buffer
    glBindBuffer(GL_ARRAY_BUFFER,/* TO CHANGE  */VBO[IDX]);
    glBufferData(GL_ARRAY_BUFFER,/* TO CHANGE  */sizeof(GLfloat),/* TO CHANGE  */P,GL_STATIC_DRAW);

    // set position attribute pointers
    glVertexAttribPointer(0,DIM,GL_FLOAT,GL_FALSE,/* TO CHANGE  */DIM*sizeof(GL_FLOAT),(GLvoid*)0);

    glEnableVertexAttribArray(0);

    // unbind the vertex array object
    glBindVertexArray(0);


}

int main()
{
    glfwInit();
#if __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
#endif
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
    glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE,GL_FALSE);

    GLFWwindow *window=glfwCreateWindow(800,600,"Learn OpenGL",nullptr,nullptr);
    if(window==nullptr)
    {
        std::cout<<"Failed to create GLFW window!"<<std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    glewExperimental=GL_TRUE;
    if(glewInit()!=GLEW_OK)
    {
        std::cout<<"Failed to initialize GLEW!"<<std::endl;
        return -1;
    }

    int width,height;
    glfwGetFramebufferSize(window,&width,&height);
    glViewport(0,0,width,height);

    // projection matrix
    glm::mat4 projection(1.0f);
    projection=glm::perspective(glm::radians(45.0f),(float)width/height,0.1f,100.0f);

    glfwSetKeyCallback(window,key_callback);
    glfwSetCursorPosCallback(window,mouse_callback);
    glfwSetScrollCallback(window,scroll_callback);

    //Shader our_shader("shader.vs","tshader.frag");
    Shader VFShader("shader.vs","shader.frag");
    //Shader VFShader2("shader.vs","shader2.frag");
    GLuint texture1,texture2;


    glGenBuffers(9,VBO);
    glGenVertexArrays(9,VAO);

   //LARM VERTICES 
    GLfloat LArm[] = {
	//FACE//
1.011382,2.950441,0.52754,
0.857078,3.756714,-0.091741,
0.874123,2.598013,0.300207,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.890984,4.478417,-0.189193,
0.949556,2.933612,0.461997,
0.863713,2.541936,0.524596,
//FACE////FACE//
0.801147,3.810115,0.18713,
0.911459,2.580884,0.355663,
1.071,3.007421,0.228853,
1.036406,3.799967,-0.114143,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.949556,2.933612,0.461997,
0.857078,3.756714,-0.091741,
1.011382,2.950441,0.52754,
//FACE////FACE//
0.929484,2.930027,0.525564,
1.036406,3.799967,-0.114143,
0.857078,3.756714,-0.091741,
0.999274,2.756345,0.582476,
//FACE////FACE//
1.036406,3.799967,-0.114143,
1.071,3.007421,0.228853,
1.070927,3.013712,0.270966,
0.906439,2.551801,0.379216,
//FACE////FACE//
1.036406,3.799967,-0.114143,
0.948571,2.642704,0.290108,
0.993667,3.008365,0.237086,
0.857078,3.756714,-0.091741,
//FACE////FACE//
0.949556,2.933612,0.461997,
1.036406,3.799967,-0.114143,
0.906439,2.551801,0.379216,
0.857078,3.756714,-0.091741,
//FACE////FACE//
0.890984,4.478417,-0.189193,
0.801147,3.810115,0.18713,
1.036406,3.799967,-0.114143,
0.949556,2.933612,0.461997,
//FACE////FACE//
0.857078,3.756714,-0.091741,
0.906439,2.551801,0.379216,
0.948571,2.642704,0.290108,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.911459,2.580884,0.355663,
0.929484,2.930027,0.525564,
0.999274,2.756345,0.582476,
1.071,3.007421,0.228853,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.874123,2.598013,0.300207,
0.946897,2.640689,0.504224,
0.911459,2.580884,0.355663,
//FACE////FACE//
0.911459,2.580884,0.355663,
0.946897,2.640689,0.504224,
0.942066,3.813601,0.203184,
0.94907,3.011596,0.26524,
//FACE////FACE//
0.948571,2.642704,0.290108,
0.94907,3.011596,0.26524,
0.863713,2.541936,0.524596,
0.948707,3.017214,0.30682,
//FACE////FACE//
1.006098,2.724973,0.438459,
0.916955,3.001885,0.464963,
0.949556,2.933612,0.461997,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.906439,2.551801,0.379216,
1.070927,3.013712,0.270966,
0.94907,3.011596,0.26524,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.857078,3.756714,-0.091741,
0.863713,2.541936,0.524596,
0.94907,3.011596,0.26524,
0.949556,2.933612,0.461997,
//FACE////FACE//
0.94907,3.011596,0.26524,
0.942066,3.813601,0.203184,
0.863713,2.541936,0.524596,
0.857078,3.756714,-0.091741,
//FACE////FACE//
0.949556,2.933612,0.461997,
0.94907,3.011596,0.26524,
0.890984,4.478417,-0.189193,
0.946897,2.640689,0.504224,
//FACE////FACE//
0.81805,2.631086,0.573979,
0.959585,2.643069,0.429631,
0.801147,3.810115,0.18713,
0.873889,2.534,0.464914,
//FACE////FACE//
0.883814,2.692732,0.564228,
0.942066,3.813601,0.203184,
0.915261,2.568894,0.304995,
0.955896,2.63185,0.451978,
//FACE////FACE//
1.06361,2.937868,0.452674,
0.946897,2.640689,0.504224,
0.959585,2.643069,0.429631,
0.81805,2.631086,0.573979,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.949556,2.933612,0.461997,
1.011382,2.950441,0.52754,
1.049758,3.810516,0.031931,
//FACE////FACE//
0.948707,3.017214,0.30682,
0.863713,2.541936,0.524596,
0.916955,3.001885,0.464963,
1.006098,2.724973,0.438459,
//FACE////FACE//
1.049758,3.810516,0.031931,
1.011382,2.950441,0.52754,
0.911459,2.580884,0.355663,
0.801147,3.810115,0.18713,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.948707,3.017214,0.30682,
0.906439,2.551801,0.379216,
0.801147,3.810115,0.18713,
//FACE////FACE//
0.942066,3.813601,0.203184,
0.913188,2.568392,0.440799,
0.949556,2.933612,0.461997,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.874123,2.598013,0.300207,
0.948707,3.017214,0.30682,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.999274,2.756345,0.582476,
0.857078,3.756714,-0.091741,
0.946897,2.640689,0.504224,
1.06361,2.937868,0.452674,
//FACE////FACE//
0.955896,2.63185,0.451978,
0.915261,2.568894,0.304995,
1.049758,3.810516,0.031931,
0.803752,2.570058,0.520198,
//FACE////FACE//
0.873889,2.534,0.464914,
0.801147,3.810115,0.18713,
0.942066,3.813601,0.203184,
0.883814,2.692732,0.564228,
//FACE////FACE//
0.803752,2.570058,0.520198,
1.049758,3.810516,0.031931,
1.036406,3.799967,-0.114143,
0.929484,2.930027,0.525564,
//FACE////FACE//
0.857078,3.756714,-0.091741,
0.993667,3.008365,0.237086,
0.874123,2.598013,0.300207,
0.946897,2.640689,0.504224,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.949556,2.933612,0.461997,
1.006098,2.724973,0.438459,
1.049758,3.810516,0.031931,
//FACE////FACE//
0.801147,3.810115,0.18713,
0.906439,2.551801,0.379216,
0.913188,2.568392,0.440799,
0.942066,3.813601,0.203184,
//FACE////FACE//
1.049758,3.810516,0.031931,
1.006098,2.724973,0.438459,
0.948571,2.642704,0.290108,
1.036406,3.799967,-0.114143,
//FACE////FACE//
1.006098,2.724973,0.438459,
1.070927,3.013712,0.270966,
0.955896,2.63185,0.451978,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.874123,2.598013,0.300207,
1.011382,2.950441,0.52754,
1.071,3.007421,0.228853,
0.948707,3.017214,0.30682,
//FACE////FACE//
0.948571,2.642704,0.290108,
0.955896,2.63185,0.451978,
0.911459,2.580884,0.355663,
0.993667,3.008365,0.237086,
//FACE////FACE//
0.913188,2.568392,0.440799,
0.916955,3.001885,0.464963,
0.94907,3.011596,0.26524,
0.949556,2.933612,0.461997,
//FACE////FACE//
0.993667,3.008365,0.237086,
0.911459,2.580884,0.355663,
1.011382,2.950441,0.52754,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.949556,2.933612,0.461997,
0.94907,3.011596,0.26524,
1.070927,3.013712,0.270966,
1.006098,2.724973,0.438459,
//FACE////FACE//
0.906439,2.551801,0.379216,
0.863713,2.541936,0.524596,
0.916955,3.001885,0.464963,
0.913188,2.568392,0.440799,
//FACE////FACE//
0.948707,3.017214,0.30682,
1.071,3.007421,0.228853,
0.863713,2.541936,0.524596,
0.906439,2.551801,0.379216,
//FACE////FACE//
1.070927,3.013712,0.270966,
1.06361,2.937868,0.452674,
0.81805,2.631086,0.573979,
0.955896,2.63185,0.451978,
//FACE////FACE//
1.011382,2.950441,0.52754,
0.883814,2.692732,0.564228,
0.999274,2.756345,0.582476,
1.071,3.007421,0.228853,
//FACE////FACE//
0.955896,2.63185,0.451978,
0.81805,2.631086,0.573979,
0.803752,2.570058,0.520198,
0.911459,2.580884,0.355663,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.929484,2.930027,0.525564,
0.873889,2.534,0.464914,
0.916955,3.001885,0.464963,
//FACE////FACE//
0.916955,3.001885,0.464963,
0.873889,2.534,0.464914,
0.915261,2.568894,0.304995,
0.94907,3.011596,0.26524,
//FACE////FACE//
0.911459,2.580884,0.355663,
0.803752,2.570058,0.520198,
0.883814,2.692732,0.564228,
1.011382,2.950441,0.52754,
//FACE////FACE//
0.94907,3.011596,0.26524,
0.915261,2.568894,0.304995,
1.06361,2.937868,0.452674,
1.070927,3.013712,0.270966,
//FACE////FACE//
1.071,3.007421,0.228853,
0.999274,2.756345,0.582476,
0.929484,2.930027,0.525564,
0.863713,2.541936,0.524596,
//FACE////FACE//
0.81805,2.631086,0.573979,
0.948707,3.017214,0.30682,
0.959585,2.643069,0.429631,
0.803752,2.570058,0.520198,
//FACE////FACE//
0.929484,2.930027,0.525564,
0.913188,2.568392,0.440799,
0.946897,2.640689,0.504224,
0.873889,2.534,0.464914,
//FACE////FACE//
0.873889,2.534,0.464914,
0.946897,2.640689,0.504224,
0.948571,2.642704,0.290108,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.803752,2.570058,0.520198,
0.959585,2.643069,0.429631,
0.949556,2.933612,0.461997,
0.883814,2.692732,0.564228,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.948571,2.642704,0.290108,
1.006098,2.724973,0.438459,
1.06361,2.937868,0.452674,
//FACE////FACE//
0.999274,2.756345,0.582476,
0.906439,2.551801,0.379216,
0.913188,2.568392,0.440799,
0.929484,2.930027,0.525564,
//FACE////FACE//
1.06361,2.937868,0.452674,
1.006098,2.724973,0.438459,
0.948707,3.017214,0.30682,
0.81805,2.631086,0.573979,
//FACE////FACE//
0.883814,2.692732,0.564228,
0.949556,2.933612,0.461997,
0.906439,2.551801,0.379216,
0.999274,2.756345,0.582476,
//FACE////FACE//
0.948571,2.642704,0.290108,
0.955896,2.63185,0.451978,
1.070927,3.013712,0.270966,
1.006098,2.724973,0.438459,
//FACE////FACE//
0.906439,2.551801,0.379216,
0.948707,3.017214,0.30682,
0.916955,3.001885,0.464963,
0.913188,2.568392,0.440799,
//FACE////FACE//
1.006098,2.724973,0.438459,
1.070927,3.013712,0.270966,
1.071,3.007421,0.228853,
0.948707,3.017214,0.30682,
//FACE////FACE//
0.906439,2.551801,0.379216,
0.948707,3.017214,0.30682,
0.863713,2.541936,0.524596,
//FACE////FACE//
0.948707,3.017214,0.30682,
1.071,3.007421,0.228853,
0.993667,3.008365,0.237086,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.838195,2.996995,0.5856,
0.863908,2.581631,0.61321,
0.875181,2.565633,0.562761,
0.91662,2.951227,0.585593,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.874123,2.598013,0.300207,
0.955896,2.63185,0.451978,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.993667,3.008365,0.237086,
0.94907,3.011596,0.26524,
0.949556,2.933612,0.461997,
//FACE////FACE//
0.955896,2.63185,0.451978,
1.06361,2.937868,0.452674,
0.999274,2.756345,0.582476,
1.070927,3.013712,0.270966,
//FACE////FACE//
0.948707,3.017214,0.30682,
0.949556,2.933612,0.461997,
0.929484,2.930027,0.525564,
0.916955,3.001885,0.464963,
//FACE////FACE//
1.070927,3.013712,0.270966,
0.863713,2.541936,0.524596,
0.883814,2.692732,0.564228,
1.071,3.007421,0.228853,
//FACE////FACE//
0.948707,3.017214,0.30682,
0.874123,2.598013,0.300207,
0.873889,2.534,0.464914,
0.863713,2.541936,0.524596,
//FACE////FACE//
1.071,3.007421,0.228853,
0.883814,2.692732,0.564228,
0.911459,2.580884,0.355663,
0.993667,3.008365,0.237086,
//FACE////FACE//
0.916955,3.001885,0.464963,
0.929484,2.930027,0.525564,
1.011382,2.950441,0.52754,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.874123,2.598013,0.300207,
1.011382,2.950441,0.52754,
1.06361,2.937868,0.452674,
0.955896,2.63185,0.451978,
//FACE////FACE//
0.993667,3.008365,0.237086,
0.911459,2.580884,0.355663,
0.915261,2.568894,0.304995,
0.94907,3.011596,0.26524,
//FACE////FACE//
1.06361,2.937868,0.452674,
1.006098,2.724973,0.438459,
0.906439,2.551801,0.379216,
0.999274,2.756345,0.582476,
//FACE////FACE//
0.949556,2.933612,0.461997,
0.959585,2.643069,0.429631,
0.913188,2.568392,0.440799,
0.929484,2.930027,0.525564,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.955896,2.63185,0.451978,
0.810468,2.558024,0.451804,
0.883814,2.692732,0.564228,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.847476,2.617838,0.323762,
0.948571,2.642704,0.290108,
0.873889,2.534,0.464914,
//FACE////FACE//
0.883814,2.692732,0.564228,
0.810468,2.558024,0.451804,
0.803752,2.570058,0.520198,
0.911459,2.580884,0.355663,
//FACE////FACE//
0.929484,2.930027,0.525564,
0.913188,2.568392,0.440799,
0.81805,2.631086,0.573979,
1.011382,2.950441,0.52754,
//FACE////FACE//
1.011382,2.950441,0.52754,
0.81805,2.631086,0.573979,
1.006098,2.724973,0.438459,
1.06361,2.937868,0.452674,
//FACE////FACE//
0.911459,2.580884,0.355663,
0.803752,2.570058,0.520198,
0.946897,2.640689,0.504224,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.873889,2.534,0.464914,
0.949556,2.933612,0.461997,
0.948707,3.017214,0.30682,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.948707,3.017214,0.30682,
0.906439,2.551801,0.379216,
//FACE////FACE//
0.873889,2.534,0.464914,
0.948571,2.642704,0.290108,
0.959585,2.643069,0.429631,
0.949556,2.933612,0.461997,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.946897,2.640689,0.504224,
0.847476,2.617838,0.323762,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.94907,3.011596,0.26524,
0.915261,2.568894,0.304995,
0.874123,2.598013,0.300207,
0.948707,3.017214,0.30682,
//FACE////FACE//
0.949556,2.933612,0.461997,
0.94907,3.011596,0.26524,
0.948707,3.017214,0.30682,
0.906439,2.551801,0.379216,
//FACE////FACE//
0.999274,2.756345,0.582476,
0.906439,2.551801,0.379216,
0.955896,2.63185,0.451978,
0.863713,2.541936,0.524596,
//FACE////FACE//
1.070927,3.013712,0.270966,
0.999274,2.756345,0.582476,
0.863713,2.541936,0.524596,
1.070927,3.013712,0.270966,
//FACE////FACE//
1.070927,3.013712,0.270966,
1.070927,3.013712,0.270966,
1.006098,2.724973,0.438459,
//FACE////FACE//
0.94907,3.011596,0.26524,
1.049758,3.810516,0.031931,
0.801147,3.810115,0.18713,
0.890984,4.478417,-0.189193,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.948707,3.017214,0.30682,
1.006098,2.724973,0.438459,
0.942066,3.813601,0.203184,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.915261,2.568894,0.304995,
1.049758,3.810516,0.031931,
0.94907,3.011596,0.26524,
//FACE////FACE//
0.942066,3.813601,0.203184,
1.006098,2.724973,0.438459,
0.915261,2.568894,0.304995,
0.863713,2.541936,0.524596,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.948571,2.642704,0.290108,
0.948707,3.017214,0.30682,
0.946897,2.640689,0.504224,
//FACE////FACE//
0.913188,2.568392,0.440799,
0.949556,2.933612,0.461997,
0.946897,2.640689,0.504224,
0.779634,4.897337,-0.144323,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.94907,3.011596,0.26524,
0.857078,3.756714,-0.091741,
0.942066,3.813601,0.203184,
//FACE////FACE//
0.942066,3.813601,0.203184,
0.857078,3.756714,-0.091741,
0.949556,2.933612,0.461997,
0.913188,2.568392,0.440799,
//FACE////FACE//
0.916955,3.001885,0.464963,
0.911459,2.580884,0.355663,
0.94907,3.011596,0.26524,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.863713,2.541936,0.524596,
0.873889,2.534,0.464914,
0.913188,2.568392,0.440799,
//FACE////FACE//
1.006098,2.724973,0.438459,
0.906439,2.551801,0.379216,
1.006098,2.724973,0.438459,
0.906439,2.551801,0.379216,
//FACE////FACE//
0.955896,2.63185,0.451978,
1.003426,2.716928,0.351591,
0.935984,2.756777,0.377006,
0.847476,2.617838,0.323762,
//FACE////FACE//
0.847476,2.617838,0.323762,
0.952642,2.626001,0.366276,
0.83253,2.604776,0.403701,
0.955896,2.63185,0.451978,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.911459,2.580884,0.355663,
0.883814,2.692732,0.564228,
0.863713,2.541936,0.524596,
//FACE////FACE//
1.006098,2.724973,0.438459,
0.874123,2.598013,0.300207,
0.863713,2.541936,0.524596,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.913188,2.568392,0.440799,
0.873889,2.534,0.464914,
0.999274,2.756345,0.582476,
0.81805,2.631086,0.573979,
//FACE////FACE//
0.81805,2.631086,0.573979,
0.999274,2.756345,0.582476,
0.874123,2.598013,0.300207,
1.006098,2.724973,0.438459,
//FACE////FACE//
0.911459,2.580884,0.355663,
0.875181,2.565633,0.562761,
0.81805,2.631086,0.573979,
0.883814,2.692732,0.564228,
//FACE////FACE//
0.873889,2.534,0.464914,
0.915261,2.568894,0.304995,
0.841765,2.62563,0.361251,
0.999274,2.756345,0.582476,
//FACE////FACE//
0.999274,2.756345,0.582476,
0.841765,2.62563,0.361251,
0.911459,2.580884,0.355663,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.883814,2.692732,0.564228,
0.915261,2.568894,0.304995,
0.873889,2.534,0.464914,
//FACE////FACE//
0.822779,2.624004,0.618292,
0.81805,2.631086,0.573979,
0.875181,2.565633,0.562761,
0.863908,2.581631,0.61321,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.822779,2.624004,0.618292,
0.863908,2.581631,0.61321,
0.841765,2.62563,0.361251,
//FACE////FACE//
0.841765,2.62563,0.361251,
0.863908,2.581631,0.61321,
0.875181,2.565633,0.562761,
0.911459,2.580884,0.355663,
//FACE////FACE//
0.883814,2.692732,0.564228,
0.81805,2.631086,0.573979,
0.822779,2.624004,0.618292,
0.915261,2.568894,0.304995,
//FACE////FACE//
1.006098,2.724973,0.438459,
0.955896,2.63185,0.451978,
0.847476,2.617838,0.323762,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.948571,2.642704,0.290108,
0.959585,2.643069,0.429631,
0.913188,2.568392,0.440799,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.913188,2.568392,0.440799,
0.906439,2.551801,0.379216,
1.006098,2.724973,0.438459,
//FACE////FACE//
0.906439,2.551801,0.379216,
1.006098,2.724973,0.438459,
0.959585,2.643069,0.429631,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.955896,2.63185,0.451978,
0.873889,2.534,0.464914,
0.810468,2.558024,0.451804,
0.847476,2.617838,0.323762,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.847476,2.617838,0.323762,
0.948571,2.642704,0.290108,
0.913188,2.568392,0.440799,
//FACE////FACE//
0.906439,2.551801,0.379216,
0.946897,2.640689,0.504224,
0.955896,2.63185,0.451978,
1.006098,2.724973,0.438459,
//FACE////FACE//
0.913188,2.568392,0.440799,
0.948571,2.642704,0.290108,
0.946897,2.640689,0.504224,
0.906439,2.551801,0.379216,
//FACE////FACE//
0.803752,2.570058,0.520198,
0.810468,2.558024,0.451804,
0.873889,2.534,0.464914,
0.863713,2.541936,0.524596,
//FACE////FACE//
0.847476,2.617838,0.323762,
0.810468,2.558024,0.451804,
0.803752,2.570058,0.520198,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.863713,2.541936,0.524596,
0.873889,2.534,0.464914,
0.955896,2.63185,0.451978,
//FACE////FACE//
0.948571,2.642704,0.290108,
0.803752,2.570058,0.520198,
0.863713,2.541936,0.524596,
0.946897,2.640689,0.504224,
//FACE////FACE//
1.003426,2.716928,0.351591,
0.952642,2.626001,0.366276,
0.874123,2.598013,0.300207,
0.935984,2.756777,0.377006,
//FACE////FACE//
0.906439,2.551801,0.379216,
0.913188,2.568392,0.440799,
1.003426,2.716928,0.351591,
0.955896,2.63185,0.451978,
//FACE////FACE//
0.847476,2.617838,0.323762,
0.935984,2.756777,0.377006,
1.003426,2.716928,0.351591,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.948571,2.642704,0.290108,
1.003426,2.716928,0.351591,
0.913188,2.568392,0.440799,
0.906439,2.551801,0.379216,
//FACE////FACE//
0.952642,2.626001,0.366276,
0.906439,2.551801,0.379216,
0.83253,2.604776,0.403701,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.913188,2.568392,0.440799,
0.959585,2.643069,0.429631,
0.952642,2.626001,0.366276,
1.003426,2.716928,0.351591,
//FACE////FACE//
0.935984,2.756777,0.377006,
0.874123,2.598013,0.300207,
0.878129,2.691206,0.427522,
1.003426,2.716928,0.351591,
//FACE////FACE//
1.003426,2.716928,0.351591,
0.878129,2.691206,0.427522,
0.959585,2.643069,0.429631,
0.913188,2.568392,0.440799,
//FACE////FACE//
0.906439,2.551801,0.379216,
0.913188,2.568392,0.440799,
0.83401,2.615184,0.438749,
0.83253,2.604776,0.403701,
//FACE////FACE//
0.959585,2.643069,0.429631,
0.913188,2.568392,0.440799,
0.906439,2.551801,0.379216,
0.952642,2.626001,0.366276,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.83253,2.604776,0.403701,
0.83401,2.615184,0.438749,
0.878129,2.691206,0.427522,
//FACE////FACE//
0.878129,2.691206,0.427522,
0.83401,2.615184,0.438749,
0.913188,2.568392,0.440799,
0.959585,2.643069,0.429631,
//FACE////FACE//
0.83253,2.604776,0.403701,
0.915261,2.568894,0.304995,
0.948571,2.642704,0.290108,
1.004275,2.713783,0.274942,
//FACE////FACE//
0.955896,2.63185,0.451978,
0.83253,2.604776,0.403701,
1.004275,2.713783,0.274942,
0.810468,2.558024,0.451804,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.878129,2.691206,0.427522,
0.952642,2.626001,0.366276,
0.847476,2.617838,0.323762,
//FACE////FACE//
0.810468,2.558024,0.451804,
1.004275,2.713783,0.274942,
0.83401,2.615184,0.438749,
0.803752,2.570058,0.520198,
//FACE////FACE//
0.803752,2.570058,0.520198,
0.83401,2.615184,0.438749,
0.878129,2.691206,0.427522,
0.946897,2.640689,0.504224,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.874123,2.598013,0.300207,
0.847476,2.617838,0.323762,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.952642,2.626001,0.366276,
0.915261,2.568894,0.304995,
0.915261,2.568894,0.304995,
0.83253,2.604776,0.403701,
//FACE////FACE//
0.878129,2.691206,0.427522,
0.915261,2.568894,0.304995,
0.915261,2.568894,0.304995,
0.952642,2.626001,0.366276,
//FACE////FACE//
0.83401,2.615184,0.438749,
0.874123,2.598013,0.300207,
0.915261,2.568894,0.304995,
0.878129,2.691206,0.427522,
//FACE////FACE//
1.004275,2.713783,0.274942,
0.948571,2.642704,0.290108,
0.874123,2.598013,0.300207,
0.83401,2.615184,0.438749,
//FACE////FACE//
0.841765,2.62563,0.361251,
0.847476,2.617838,0.323762,
0.874123,2.598013,0.300207,
0.915261,2.568894,0.304995,
0.911459,2.580884,0.355663,
//FACE////FACE//
0.948571,2.642704,0.290108,
0.915261,2.568894,0.304995,
0.874123,2.598013,0.300207,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.911459,2.580884,0.355663,
0.915261,2.568894,0.304995,
0.948571,2.642704,0.290108,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.841765,2.62563,0.361251,
0.911459,2.580884,0.355663,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.915261,2.568894,0.304995,
0.847476,2.617838,0.323762,
0.841765,2.62563,0.361251,
0.915261,2.568894,0.304995,
//FACE////FACE//
0.841765,2.62563,0.361251,
0.822779,2.624004,0.618292,
0.875181,2.565633,0.562761,
0.863908,2.581631,0.61321,
//FACE////FACE//
0.910746,2.935203,0.557802,
0.822779,2.624004,0.618292,
0.841765,2.62563,0.361251,
0.786264,2.983454,0.51437,
//FACE////FACE//
0.786264,2.983454,0.51437,
0.841765,2.62563,0.361251,
0.863908,2.581631,0.61321,
0.838195,2.996995,0.5856,
//FACE////FACE//
0.91662,2.951227,0.585593,
0.875181,2.565633,0.562761,
0.822779,2.624004,0.618292,
0.910746,2.935203,0.557802,
//FACE////FACE//
0.974626,3.007018,0.518422,
0.91662,2.951227,0.585593,
0.910746,2.935203,0.557802,
0.924254,2.982626,0.499816,
//FACE////FACE//
0.847476,2.617838,0.323762,
0.786264,2.983454,0.51437,
0.838195,2.996995,0.5856,
0.810468,2.558024,0.451804,
//FACE////FACE//
0.924254,2.982626,0.499816,
0.910746,2.935203,0.557802,
0.786264,2.983454,0.51437,
0.847476,2.617838,0.323762,
//FACE////FACE//
0.810468,2.558024,0.451804,
0.838195,2.996995,0.5856,
0.91662,2.951227,0.585593,
0.974626,3.007018,0.518422,
//FACE////FACE//
1.011382,2.950441,0.52754,
0.803752,2.570058,0.520198,
0.929484,2.930027,0.525564,
0.911459,2.580884,0.355663,
//FACE////FACE//
0.863713,2.541936,0.524596,
0.873889,2.534,0.464914,
0.883814,2.692732,0.564228,
0.916955,3.001885,0.464963,
//FACE////FACE//
0.949556,2.933612,0.461997,
0.955896,2.63185,0.451978,
0.803752,2.570058,0.520198,
1.011382,2.950441,0.52754,
//FACE////FACE//
1.071,3.007421,0.228853,
0.999274,2.756345,0.582476,
1.06361,2.937868,0.452674,
1.070927,3.013712,0.270966,
//FACE////FACE//
1.070927,3.013712,0.270966,
1.06361,2.937868,0.452674,
0.81805,2.631086,0.573979,
0.94907,3.011596,0.26524,
//FACE////FACE//
0.916955,3.001885,0.464963,
0.883814,2.692732,0.564228,
0.955896,2.63185,0.451978,
0.949556,2.933612,0.461997,
//FACE////FACE//
0.94907,3.011596,0.26524,
0.81805,2.631086,0.573979,
0.873889,2.534,0.464914,
0.863713,2.541936,0.524596,
//FACE////FACE//
0.946897,2.640689,0.504224,
0.810468,2.558024,0.451804,
0.974626,3.007018,0.518422,
0.874123,2.598013,0.300207,
//FACE////FACE//
0.916955,3.001885,0.464963,
0.924254,2.982626,0.499816,
0.847476,2.617838,0.323762,
0.913188,2.568392,0.440799,
//FACE////FACE//
0.913188,2.568392,0.440799,
0.847476,2.617838,0.323762,
0.810468,2.558024,0.451804,
0.946897,2.640689,0.504224,
//FACE////FACE//
0.874123,2.598013,0.300207,
0.974626,3.007018,0.518422,
0.924254,2.982626,0.499816,
0.916955,3.001885,0.464963
//FACE//	
    };
//END LARM VERTICES

glm::vec3 LArm_Position(0.0f,0.0f,0.0f); 
glm::vec3 LArm_Shoulder(0.0f,4.9f,0.0f);
   
//
    // unbind the vertex array object
    glBindVertexArray(0);

    //SETUP LARM

    // bind vertex array object
    glBindVertexArray(/* TO CHANGE  */VAO[0]);

    // copy the vertices in a buffer
    glBindBuffer(GL_ARRAY_BUFFER,/* TO CHANGE  */VBO[0]);
    glBufferData(GL_ARRAY_BUFFER,/* TO CHANGE  */sizeof(LArm),/* TO CHANGE  */LArm,GL_STATIC_DRAW);

    // set position attribute pointers
    glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,/* TO CHANGE  */3*sizeof(GL_FLOAT),(GLvoid*)0);
        
    glEnableVertexAttribArray(0);
   
    //glEnableVertexAttribArray(1);

    // unbind the vertex array object
    glBindVertexArray(0);

    //END SETUP LARM

    //Shader VFShader("shader.vs","shader.frag");

    // view space transform
    glm::mat4 view(1.0f);
    
    //Model Space
    //glm::mat4 model(1.0f);

    // note that we're translating the scene in the reverse direction of where we want to move
    view=glm::translate(view,glm::vec3(0.0f,0.0f,-100.0f));
    GLfloat R = PI/4;
    ///glm::mat4 model = glm::rotate(glm::mat4(1.0f),R,glm::vec3(0.0,1.0,0.0));	

    glEnable(GL_DEPTH_TEST);

    //Shader VFShader("transform.vs","shader.frag");

    while(!glfwWindowShouldClose(window))
    {
        glfwPollEvents();
        glClearColor(.2f,.3f,.3f,1.f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	GLfloat current_frame=glfwGetTime();
        delta_time=current_frame-last_frame;
        last_frame=current_frame;

	//Update View
	view=glm::lookAt(camera_position,camera_position+camera_front,camera_up);

	//Update Projection
        projection=glm::perspective(glm::radians(fov),(float)width/height,0.1f,100.0f);

        //glBindVertexArray(VAO[X]);
	//glBindVertexArray(0);

	//Draw LArm

	VFShader.Use();

	glBindVertexArray(/* CHANGE */VAO[0]);

        //Validate Shader Matrices

        GLuint /* CHANGE */model_location3 = Validate(/* CHANGE */VFShader,view,projection);

            /////////////////////////

            // world space transformations
            glm::mat4 /* CHANGE */model3(1.0f);

            glm::mat4 model2=glm::translate(/* CHANGE */model3,/* CHANGE */LArm_Position);
            model2=glm::rotate(/* CHANGE */model3,glm::radians(/*(GLfloat)glfwGetTime()*50.0f*/ROT),glm::vec3(0.0f,1.0f,0.0f));

	    //MY SHOULDER    

	    model2=glm::translate(model2,LArm_Shoulder);	
	 
   	    model2=glm::rotate(model2,glm::radians(/*(GLfloat)glfwGetTime()*50.0f*/LArmR),glm::vec3(1.0f,0.0f,0.0f));

	    model2=glm::translate(model2,-LArm_Shoulder);

            glUniformMatrix4fv(/* CHANGE */ model_location3,1,GL_FALSE,glm::value_ptr(/* CHANGE */model2));

	    //TOP ARM
            glDrawArrays(GL_TRIANGLE_STRIP,0,sizeof(LArm)/sizeof(GLfloat));
	    //glDrawArrays(GL_TRIANGLE_STRIP,0,4);
            //glDrawArrays(GL_TRIANGLE_STRIP,4,4);
            //glDrawArrays(GL_TRIANGLE_STRIP,8,4);
            //glDrawArrays(GL_TRIANGLE_STRIP,12,4);
            //glDrawArrays(GL_TRIANGLE_STRIP,16,4);
            //glDrawArrays(GL_TRIANGLE_STRIP,20,4);


            //BOTTOM ARM
	glBindVertexArray(0);	
	   
	//End Draw LARM

        glBindVertexArray(0);
	//glBindVertexArrat(VAO[1]);

        glfwSwapBuffers(window);
    }

    // deallocate all resources
    glDeleteVertexArrays(4,VAO);
    glDeleteBuffers(4,VBO);
    // terminate GLFW
    glfwTerminate();

    return 0;
}
